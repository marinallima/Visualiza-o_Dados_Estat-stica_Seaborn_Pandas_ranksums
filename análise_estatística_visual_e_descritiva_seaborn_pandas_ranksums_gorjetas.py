# -*- coding: utf-8 -*-
"""Análise Estatística Visual e Descritiva - Seaborn_Pandas_ranksums_Gorjetas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gkPKJ3EsI1UMa5z6gxqmEEObvb3_AwUC

# Importando Base de Dados
"""

import pandas as pd

pd.read_csv('tips.csv')

dados = pd.read_csv('tips.csv')

dados.head()

"""Traduzindo os Dados para Português:"""

dados.columns

renomear = {
    'total_bill' : 'valor_da_conta',
    'tip' : 'gorjeta',
    'dessert' : 'sobremesa',
    'day' : 'dia_da_semana',
    'time' : 'hora_do_dia',
    'size' : 'total_de_pessoas'
}

type(dados)

gorjetas = dados.rename(columns = renomear)

gorjetas.head(1)

gorjetas.sobremesa.unique()

sim_nao = {
    'No' : 'Não',
    'Yes' : 'Sim'
}

gorjetas.sobremesa.map(sim_nao)

gorjetas.head(1)

"""A resposta para este campo continua como "No" em inglês; isso acontece porque não atribuímos este mapa para nossa variável gorjetas. Logo, escreveremos que gorjetas.sobremesa é igual a gorjetas.sobremesa.map(sim_nao)"""

gorjetas.sobremesa = gorjetas.sobremesa.map(sim_nao)

gorjetas.head(1)

gorjetas.dia_da_semana.unique()

dias = {
    'Sun' : 'Domingo',
    'Sat' : 'Sábado',
    'Thur' : 'Quinta',
    'Fri' : 'Sexta'
}

gorjetas.dia_da_semana = gorjetas.dia_da_semana.map(dias)

gorjetas.head(1)

gorjetas.dia_da_semana.unique()

gorjetas.hora_do_dia.unique()

hora = {
    'Dinner' : 'Jantar',
    'Lunch' : 'Almoço'
}

gorjetas.hora_do_dia = gorjetas.hora_do_dia.map(hora)

gorjetas.head()

gorjetas.head(244)

"""# O Seaborn que importaremos é uma API feita com base no MatPlotlib para plotagem de dados, geração de visualizações e gráficos estatísticos, além de ser em Python.

1. O valor da conta influencia diretamente no valor da gorjeta?
"""

!pip install seaborn==0.9.0

import seaborn as sns

"""# Análise 1 - Valor da Conta e Gorjeta"""

gorjetas.columns

"""Chamaremos o Seaborn por sns e geraremos este primeiro gráfico com scatterplot(), o qual receberá três parâmetros: x referente ao valor do eixo 'valor_da_conta', y para 'gorjeta' e a base de dados data-gorjetas que estamos utilizando."""

valor_gorjeta = sns.scatterplot(x= 'valor_da_conta', y= 'gorjeta', data=gorjetas)

"""**Visualmente, há uma progressão linear que indica o aumento do valor da gorjeta conforme o valor da conta é maior para cada mesa.**"""

gorjetas.shape[0]

"""Para atestarmos se todos os registros estão realmente preenchidos ou são nulos, poderemos utilizar o print() para visualizarmos o relatório da exploração 'A base de dados contém {} registros. Para formatar, usaremos .format() após a frase, recebendo gorjetas.shape[0]"""

print('A base de dados contém {} registros \n'.format(gorjetas.shape[0]))
print('Registros não nulos')
gorjetas.count()

"""## Verificar se os valores são proporcionais - Criando o campo porcentagem"""

gorjetas.head(1)

"""Criaremos um novo campo em gorjetas, inseriremos gorjetas[] passando o nome 'porcentagem'. Este será formado por gorjetas['gorjeta'] dividido com / por gorjetas['valor_da_conta']."""

gorjetas['porcentagem'] = gorjetas['gorjeta'] / gorjetas['valor_da_conta']

gorjetas.head()

gorjetas.porcentagem = gorjetas.porcentagem.round(2)

gorjetas.head()

"""Como já temos o valor da porcentagem, queremos visualizar um gráfico estatístico com valor_da_conta sendo o eixo x e a porcentagem sendo o eixo y para vermos se realmente os valores são proporcionais.

Para isso, criaremos uma variável porcentagem_conta para armazenar esta visualização. Em seguida, chamaremos o Seaborn com sns seguido de scatterplot() recebendo x='valor_da_conta' e y='porcentagem'. Por fim, passaremos data=gorjetas como terceiro argumento.
"""

porcentagem_conta = sns.scatterplot(x='valor_da_conta', y='porcentagem', data=gorjetas)

"""Visualmente parece que o valor da conta não é proporcional ao valor da gorjeta, e sim que diminui. Ou seja, nas contas mais altas, os valores das gorjetas foram maiores do que as mais baixas, porém não são proporcionais, apesar das impressões do primeiro gráfico feito anteriormente.

# Visualmente, o valor da conta não é igual ao valor da gorjeta.
"""

porcentagem_conta_linha = sns.relplot(x='valor_da_conta', y='porcentagem', kind='line', data=gorjetas)

"""Para visualizarmos a progressão que estamos tendo, escreveremos apenas o comando sns.lmplot() recebendo os mesmos eixos, sem necessidade de armazenar em uma variável própria."""

sns.lmplot(x='valor_da_conta', y='porcentagem', data=gorjetas)

"""Com este gráfico, poderemos ver que realmente o valor da porcentagem tende a diminuir com o aumento do valor total da conta.

# Análise 2 - Sobremesa

Finalizamos nossa primeira análise e vimos que o valor da conta influencia no valor da gorjeta, mas não de maneira proporcional.

Agora, como nossa segunda análise, verificaremos se a sobremesa interfere ou não no valor da gorjeta. Começaremos com uma nova divisão textual escrevendo "#Análise 2 - Sobremesa".

Temos um campo sobremesa, e queremos visualizar todos as mesas que pediram sobremesa. Para isso, digitaremos gorjeta[] e passaremos a instrução gorjetas.sobremesa sendo == 'Sim' para visualizar todas as pessoas que pediram.
"""

gorjetas[gorjetas.sobremesa == 'Sim']

gorjetas[gorjetas.sobremesa == 'Sim'].describe()

gorjetas[gorjetas.sobremesa == 'Não'].describe()

"""Nesta etapa, geraremos alguns gráficos para conseguirmos saber se de fato o valor da gorjeta é influenciado com o pedido da sobremesa ou não.

O primeiro será um gráfico categórico de "sim" ou "não" colocando todos os pontos dos clientes que pediram e dos que não pediram este item, em comparação com o valor da gorjeta em dois eixos x e y. Desta forma, poderemos visualizar melhor essa questão.

Para criar, chamaremos o Seaborn com sns seguido de catplot(). Dentro deste, passaremos o eixo x='sobremesa' e y='gorjeta', finalizando com data=gorjetas.
"""

sns.catplot(x='sobremesa', y='gorjeta', data=gorjetas)

"""Porém, ainda não conseguiremos identificar e afirmar que a sobremesa influencia diretamente no valor da gorjeta; é possível ver que há diferenças, mas a resposta não é exata.

Para fazermos esta confirmação, geraremos um segundo gráfico que nos permitirá comprovar essa questão por meio de tonalidades diferentes para cada grupo.

Chamaremos a classe do Seaborn com sns seguido de relplot(). Passaremos x=valor_da_conta e y='gorjeta que irá mostrar um aumento conforme vimos anteriormente. Depois, adicionaremos um novo parâmetro hue do tipo 'sobremesa' e finalizaremos com data=gorjetas.
"""

sns.relplot(x='valor_da_conta', y='gorjeta', hue='sobremesa', data=gorjetas)

"""Analisando este gráfico, poderemos visualizar que os pontos de "não" possuem uma distribuição mais linear do que os de "sim", os quais aparentam mais espaçamento sem grande linearidade.

Criaremos este mesmo gráfico em duas colunas para cada grupo. Copiaremos e colaremos a mesma sentença anterior, passando um quarto parâmetro col igual a 'sobremesa'.
"""

sns.relplot(x='valor_da_conta', y='gorjeta', hue='sobremesa', col='sobremesa', data=gorjetas)

"""Se quisermos traçar uma linha que permite uma visualização mais clara da situação, utilizaremos o lmplot() já citado, passando os eixos x e y como 'valor_da_conta' e 'gorjeta' respectivamente, separando os dois grupos com col em tonalidades hue e finalizando com data=gorjetas."""

sns.lmplot(x='valor_da_conta', y='gorjeta', col='sobremesa', hue='sobremesa', data=gorjetas)

"""Com isso, poderemos ver que existe uma diferença de fato; visualmente, identificaremos que aqueles que pediram sobremesa possuem a distribuição diferente em comparação aos que não pediram.

Agora, precisaremos constatar se os dois casos realmente influenciam no valor da gorjeta. Isso só será possível através de um cálculo estatístico.

Antes, geraremos mais um gráfico; estamos sempre utilizando um valor da conta e outro de gorjeta, e sabemos que quando um aumenta o outro também aumenta, ainda que sem uma proporção exata. Copiaremos a última sentença escrita e colaremos na célula seguinte, substituindo 'gorjeta' por 'porcentagem' no eixo y.
"""

sns.lmplot(x='valor_da_conta', y='porcentagem', col='sobremesa', hue='sobremesa', data=gorjetas)

"""Desta forma, conseguiremos visualizar que o grupo que não pediu sobremesa possuirá uma linha mais horizontal, enquanto os que pediram apresentará maior inclinação da linha.

**Visualmente, parece que existe uma diferença na gorjeta dependendo se a sobremesa é pedida ou não.**

Em todos os gráficos, utilizamos pontos e linhas. Mas em relplot() há um parâmetro capaz de transformar totalmente em linhas com uso, chamado kind do tipo 'line'.
"""

sns.relplot(x='valor_da_conta', y='gorjeta', col='sobremesa', hue='sobremesa', kind='line', data=gorjetas)

"""Utilizamos os dados de uma amostra, pois não podemos verificar o comportamento de todas as pessoas do mundo e colocar os dados dentro de nosso plot.

Porém, precisaremos pensar se os clientes que futuramente virão ao nosso restaurante se comportarão da mesma maneira ou não. Vimos antes que, adicionando porcentagem, as diferenças entre os grupos fica bem mais visível.

Neste passo, descobriremos se a população geral que consome a sobremesa e a que não consome se comportam igual ou diferentemente da amostra através de testes de hipótese.

##Teste de hipótese

Como primeiro passo, começaremos com a hipótese nula; adicionaremos mais uma célula textual para termos um escrito em negrito na parte superior e escreveremos **H<sup>null</sup>**.

**H<sup>null</sup>**
**A distribuição da taxa de gorjeta é igual nos dois grupos.**

**H<sup>alt</sup>**
**A distribuição da taxa de gorjeta não é igual nos dois grupos.**

Para realizarmos nosso teste de hipóteses, importaremos a biblioteca Ranksums a partir de scipy.stats
"""

from scipy.stats import ranksums

"""Agora, traremos o valor da porcentagem de todas as pessoas que pediram a sobremesa a partir da montagem de uma query. Na célula seguinte, escreveremos gorjetas.query() recebendo sobremesa sendo == a 'Sim entre aspas. Lembramos que o Sim e Não devem estar escritos exatamente como implementamos na base de dados. Em seguida, adicionamos porcentagem que queremos verificar."""

gorjetas.query("sobremesa == 'Sim'").porcentagem

"""O sistema retorna uma lista com todos os valores relativos ao nosso comando. Para deixarmos mais legível, atribuiremos todo o resultado da query em uma variável sobremesa."""

sobremesa = gorjetas.query("sobremesa == 'Sim'").porcentagem
sem_sobremesa = gorjetas.query("sobremesa == 'Não'").porcentagem

ranksums(sobremesa, sem_sobremesa)

"""A resposta que nos importará é o pvalue de arredondados 0.52, o que significará que, apesar de os dois grupos terem dado gorjetas de valores diferentes entre si, a diferença é insignificante do ponto de vista matemático. Ou seja, não poderemos dizer que a população geral será diferente também.

Cientes disso, continuaremos somente com nossa hipótese nula, não aceitando mais a hipótese alternativa. **Para aceitarmos esta última, o valor de pvalue deveria ser igual ou menor do que 0.05. Como nosso resultado foi maior do que isso, poderemos descartar esta hipótese alternativa.**

Para melhorarmos a exibição em nosso relatório, atribuiremos este valor em uma variável r e geraremos um registro com print(), recebendo 'o valor do p-value é {} seguido de format(r.pvalue).
"""

r = ranksums(sobremesa, sem_sobremesa)
print('O valor do p-value é {}'.format(r.pvalue))

"""**H<sup>null</sup>**
**A distribuição da taxa de gorjeta é igual nos dois grupos.**

#  Análise 3 - Dia da semana
"""

gorjetas.head()

gorjetas.dia_da_semana.unique()

sns.catplot(x='dia_da_semana', y='valor_da_conta', data=gorjetas)

"""Faremos outro plot relacionando o valor da conta com os dias da semana, mas unindo os dados em um único gráfico com relplot() recebendo 'valor_da_conta' como eixo x, 'gorjeta' como eixo y, propriedade hue para tonalidades diferentes e data=gorjetas."""

sns.relplot(x='valor_da_conta', y='gorjeta', hue='dia_da_semana', data=gorjetas)

"""Para melhor visualização, separaremos cada dia da semana com os dois plots feitos, relacionados com valor da gorjeta, valor da conta e porcentagem.

Chamaremos sns para relplot() que receberá x='valor_da_conta', y='gorjeta', hue='dia_da_semana'. Para termos esta separação, passamos a já conhecida propriedade col='dia_da_semana', finalizando com nosso DataFrame.
"""

sns.relplot(x='valor_da_conta', y='gorjeta', hue='dia_da_semana', col='dia_da_semana', data=gorjetas)

"""Em seguida, geraremos um novo gráfico com estas mesmas propriedades, substituindo o eixo y por 'porcentagem'."""

sns.relplot(x='valor_da_conta', y='porcentagem', hue='dia_da_semana', col='dia_da_semana', data=gorjetas)

sns.lmplot(x='valor_da_conta', y='porcentagem', hue='dia_da_semana', col='dia_da_semana', data=gorjetas)

"""Agora que já realizamos várias análises visuais gerando alguns gráficos, faremos análises descritivas em relação ao valor da conta, porcentagem, média de gorjetas e etc."""

gorjetas.gorjeta.mean()

media_geral_gorjetas = gorjetas.gorjeta.mean()

print('A média geral das gorjetas é de {}'.format(media_geral_gorjetas))

"""Agora, faremos a média geral dos valores para quinta, sexta, sábado e domingo. Pegaremos primeiro a média de todos os dias com gorjetas.groupby(), recebendo a especificação de 'dia_da_semana' entre colchetes. Em seguida, aplicamos a média mean()"""

gorjetas.groupby(['dia_da_semana']).mean()

"""Pelas informações da tabela, poderemos ver que o dia com a maior média de gorjeta é domingo. A média do total_de_pessoas deve ser feita por números inteiros, já que não é possível ter números decimais neste caso. Portanto, removeremos este campo de nossa análise adicionando dois colchetes após mean() para inserir os valores que queremos exibir."""

gorjetas.groupby(['dia_da_semana']).mean()[['valor_da_conta', 'gorjeta', 'porcentagem']]

"""Estamos olhando somente a média dos valores, sem levar em consideração o número de clientes em cada dia. Para saber a frequência desses dias, inserimos gorjetas.dia_da_semana com value_counts()."""

gorjetas.dia_da_semana.value_counts()

print('Frequência dos dias')
gorjetas.dia_da_semana.value_counts()

"""## Teste de Hipótese

Anteriormente, vimos que a média do valor da gorjeta no domingo é maior do que a do sábado. Porém, também observamos que a quantidade de pessoas no restaurante é maior no sábado do que no domingo.

A questão é se os valores das contas nos dois dias são diferentes também.
**Nossa hipótese nula busca descobrir se realmente a distribuição do valor da conta é igual no sábado e no domingo. Já a hipótese alternativa é justamente o contrário, e escreveremos suas descrições em células textuais da mesma forma que fizemos anteriormente.**

Agora, montaremos a query() que trará o valor da conta de cada um dos dias em questão, como realizamos em nossos testes relacionados a gorjeta. Começaremos com 'Domingo' e guardaremos os valores em uma variável valor_conta_domingo.

**H<sup>null</sup>**

> **A distribuição do valor da conta é igual no sábado e no domingo.**

**H<sup>alt</sup>**

> **A distribuição do valor da conta NÃO é igual no sábado e no domingo.**
"""

gorjetas.query("dia_da_semana == 'Domingo'").valor_da_conta

valor_conta_domingo = gorjetas.query("dia_da_semana == 'Domingo'").valor_da_conta

valor_conta_sabado = gorjetas.query("dia_da_semana == 'Sábado'").valor_da_conta

ranksums(valor_conta_domingo, valor_conta_sabado)

"""### O resultado de pvalue será 0.35, ou seja, apenas aceitaremos a hipótese alternativa se este número for menor do que 0.05; como é maior, apenas nossa hipótese nula é válida. Isso significa que a distribuição do valor da conta é igual no sábado e no domingo.

### Portanto, mesmo que o sábado seja mais frequentado e o domingo possua a maior média de gorjetas, não são diferentes no que diz respeito ao valor da conta.

**H<sup>null</sup>**

> **A distribuição do valor da conta é igual no sábado e no domingo.**

Para finalizarmos e melhorarmos a visualização, atribuiremos este valor para uma variável r2 e aplicaremos print() dizendo que 'O valor do p-value é {} seguido de format() com r2.pvalue.
"""

r2 = ranksums(valor_conta_domingo, valor_conta_sabado)
print('O valor do p-value é {}'.format(r2.pvalue))

"""# Análise 4 - Hora do dia

Nesta etapa, faremos a última análise deste curso.

Falta-nos analisar a hora do dia em relação ao valor da conta e percentual de gorjeta. Neste campo, temos dois períodos diferentes a serem analisados: Almoço e Jantar, visíveis por gorjetas.hora_do_dia.unique().

Aplicaremos tanto análises visuais quanto utilizando ranksums() para os dois grupos em questão. Nosso primeiro gráfico estatístico será categórico cruzando ahora do dia com o valor da conta, ou seja, usaremos catplot() passando x como 'hora_do_dia' e y como 'valor_da_conta'.
"""

gorjetas.head()

gorjetas.hora_do_dia.unique()

"""# Análise 4 - Hora do dia"""

sns.catplot(x='hora_do_dia', y='valor_da_conta', data=gorjetas)

"""Aparentemente, o jantar é o momento do dia com os maiores valores de conta. Perceberemos que existem alguns pontos com quantias muito parecidas, e poderemos aplicar um parâmetro que nos permitirá visualizar melhor todos os pontos separadamente.

Copiaremos a última sentença de código e colaremos na célula seguinte, passando um quarto parâmetro kind sendo igual a 'swarm'.
"""

sns.catplot(x='hora_do_dia', y='valor_da_conta', kind='swarm', data=gorjetas) #kind='swarm' comando pra visualizar melhor

"""**Geraremos um outro gráfico interessante por meio de violinplot(), sendo justamente a tradução de "violino" para o inglês.**

**Como parâmetro, passaremos x sendo a 'hora_do_dia', y como 'valor_da_conta' e data=gorjetas.**
"""

sns.violinplot(x='hora_do_dia', y='valor_da_conta', data=gorjetas)

sns.boxplot(x='hora_do_dia', y='valor_da_conta', data=gorjetas)

"""Outro gráfico bastante conhecido e tradicional que utilizaremos em nossa análise é o histograma por meio de distplot(). Para que funcione, precisaremos pegar os valores da conta de todas as pessoas que almoçaram no restaurante através de uma query().

Passaremos como parâmetro hora_do_dia sendo == a 'Almoço' entre aspas. Por fim, aplicaremos valor_da_conta e armazenaremos em uma nova variável almoco.
"""

almoco = gorjetas.query("hora_do_dia == 'Almoço'").valor_da_conta

sns.distplot(almoco)

"""Poderemos passar um parâmetro kde igual a False para visualizarmos um gráfico atrás deste último, facilitando nossa leitura."""

sns.distplot(almoco, kde=False)

jantar = gorjetas.query("hora_do_dia == 'Jantar'").valor_da_conta

sns.distplot(jantar)

sns.distplot(jantar, kde=False)

"""**Nesta última etapa, faremos algumas análises em relação a hora do dia.**

**Já geramos alguns gráficos, mas queremos uma descrição estatística com números do que estamos visualizando. Nossa análise será para saber se a hora do dia tem influência sobre o valor da conta.**

Poderemos tirar uma média desses valores utilizando o groupby([]). Dentro dos colchetes, passaremos o grupo 'hora_do_dia e mean() ao final.

Pergunta: A hora do dia está influenciando no valor da conta?
"""

gorjetas.groupby(['hora_do_dia']).mean()

gorjetas.groupby(['hora_do_dia']).mean()[['valor_da_conta', 'gorjeta', 'porcentagem']]

"""Com isso, poderemos ver que a média do valor da conta e da gorjeta no almoço são menores em relação ao jantar. A mesma coisa acontece com a porcentagem.

# Teste de Hipótese

Aplicaremos ranksums() para teste de hipóteses, descobrindo se, de fato, a distribuição do valor da conta é diferente entre os dois grupos em questão.

A hipótese nula buscará descobrir se a distribuição é igual no almoço e no jantar enquanto a alternativa analisará se é diferente.

Portanto, chamaremos ranksums() e passaremos o valor do jantar e do almoco. Armazenaremos esta informação em uma variável r2.

**H<sup>null</sup>**

> **A distribuição do valor da conta é igual no jantar e no almoço.**

**H<sup>alt</sup>**

> **A distribuição do valor da conta NÃO é igual no jantar e no almoço.**
"""

ranksums(jantar, almoco)

r2 = ranksums(jantar, almoco)

"""**O sistema retorna um pvalue menor do que 0.05, o que significará que a distribuição é diferente nos dois períodos do dia e que a hipótese nula poderá ser rejeitada.**

Para termos um relatório mais organizado, aplicaremos print() para 'O valor do p-value é de {} seguido de format() recebendo r2.pvalue.

Adicionaremos a observação textual com a hipótese alternativa aceita para deixar nossa conclusão de que a distribuição de valores da conta não é igual no almoço e no jantar.
"""

print('O valor do p-value é de {}'.format(r2.pvalue))

"""**H<sup>alt</sup>**

> **A distribuição do valor da conta NÃO é igual no jantar e no almoço.**

# Teste de Hipótese 2

Faremos um teste com pvalue relacionado à porcentagem que possui uma média bastante parecida para as duas horas do dia, verificando se são grupos diferentes de fato ou não.

Chamaremos gorjetas passando query() para sabermos se a hora_do_dia é == a 'Almoço' entre aspas, seguido de porcentagem.

Após executar e receber os valores, armazenaremos em uma variável porcentagem_almoco

**H<sup>null</sup>**

> **A distribuição da taxa da gorjeta é igual no jantar e no almoço.**

**H<sup>alt</sup>**

> **A distribuição da taxa da gorjeta NÃO é igual no jantar e no almoço.**
"""

gorjetas.query("hora_do_dia == 'Almoço'").porcentagem

porcentagem_almoco = gorjetas.query("hora_do_dia == 'Almoço'").porcentagem

porcentagem_jantar = gorjetas.query("hora_do_dia == 'Jantar'").porcentagem

ranksums(porcentagem_almoco, porcentagem_jantar)

"""O valor do pvalue é superior a 0.05, o que significará que temos grupos parecidos. Ou seja, a distribuição da taxa da gorjeta é igual de fato no almoço e no jantar.

**H<sup>null</sup>**

> **A distribuição da taxa da gorjeta é igual no jantar e no almoço.**
"""

r3 = ranksums(porcentagem_almoco, porcentagem_jantar)
print('O valor do p-value é de {}'.format(r3.pvalue))

